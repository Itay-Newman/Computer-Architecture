

; enum _crt_app_type, copyof_1
_crt_unknown_app  = 0
_crt_console_app  = 1
_crt_gui_app  = 2

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2023 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 7C6ED0E81DFD32B84B419CD42B7C3EDD86B60A64313F47F08E76D85D32B99155
; Input MD5    : DA5FA55C13F54B603C95398640163F6D
; Input CRC32  : 4AD94B01

; File Name   : C:\Users\Cyber_User\Documents\Magshimim\Computer-Architecture\Week 5\important\1.exe
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 400000
; Timestamp   : 675951A5 (Wed Dec 11 08:47:33 2024)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00000B0C (   2828.)
; Section size in file          : 00000C00 (   3072.)
; Offset to raw data for section: 00000400
; Flags 60500060: Text Data Executable Readable
; Alignment     : 16 bytes



.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 401000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing


; Attributes: bp-based frame

; LONG __stdcall _gnu_exception_handler(struct _EXCEPTION_POINTERS *ExceptionInfo)
__gnu_exception_handler@4 proc near

Signal= dword ptr -18h
Function= dword ptr -14h
var_8= dword ptr -8
var_4= dword ptr -4
ExceptionInfo= dword ptr  8

push    bp
mov     ebp, esp
sub     esp, 18h
mov     [ebp+var_8], ebx
mov     eax, [ebp+ExceptionInfo]
xor     ebx, ebx
mov     [ebp+var_4], esi
mov     eax, [eax]
xor     esi, esi
mov     eax, [eax]
cmp     eax, 0C0000091h
ja      short loc_401061
cmp     eax, 0C000008Dh
jb      short loc_401080

loc_401025:
mov     esi, 1

loc_40102A:             ; Signal
mov     [esp+18h+Signal], 8
xor     edx, edx
mov     [esp+18h+Function], edx ; Function
call    _signal
cmp     eax, 1
jz      short loc_4010BB
test    eax, eax
jz      short loc_401053
mov     [esp+18h+Signal], 8
call    eax

loc_40104E:
mov     ebx, 0FFFFFFFFh

loc_401053:
mov     eax, ebx
mov     esi, [ebp+var_4]
mov     ebx, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    4

loc_401061:
cmp     eax, 0C0000094h
jz      short loc_40102A
ja      short loc_4010B4
cmp     eax, 0C0000093h
jz      short loc_401025
mov     eax, ebx
mov     esi, [ebp+var_4]
mov     ebx, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    4
align 10h

loc_401080:
cmp     eax, 0C0000005h
jz      short loc_4010E2
cmp     eax, 0C000001Dh

loc_40108C:
jnz     short loc_401053
mov     [esp+18h+Signal], 4 ; Signal
xor     esi, esi
mov     [esp+18h+Function], esi ; Function
call    _signal
cmp     eax, 1
jz      short loc_40110F
test    eax, eax
jz      short loc_401053
mov     [esp+18h+Signal], 4
call    eax
jmp     short loc_40104E

loc_4010B4:
cmp     eax, 0C0000096h
jmp     short loc_40108C

loc_4010BB:             ; Signal
mov     [esp+18h+Signal], 8
mov     eax, 1
mov     [esp+18h+Function], eax ; Function
call    _signal
test    esi, esi
jz      loc_40104E
call    __fpreset
jmp     loc_40104E

loc_4010E2:             ; Signal
mov     [esp+18h+Signal], 0Bh
xor     eax, eax
mov     [esp+18h+Function], eax ; Function
call    _signal
cmp     eax, 1
jz      short loc_401129
test    eax, eax
jz      loc_401053
mov     [esp+18h+Signal], 0Bh
call    eax
jmp     loc_40104E

loc_40110F:             ; Signal
mov     [esp+18h+Signal], 4
mov     ecx, 1
mov     [esp+18h+Function], ecx ; Function
call    _signal
jmp     loc_40104E

loc_401129:             ; Signal
mov     [esp+18h+Signal], 0Bh
mov     eax, 1
mov     [esp+18h+Function], eax ; Function
call    _signal
jmp     loc_40104E
__gnu_exception_handler@4 endp

align 10h


; Attributes: noreturn bp-based frame fuzzy-sp

___mingw_CRTStartup proc near

lpTopLevelExceptionFilter= dword ptr -28h
Mode= dword ptr -24h
envp= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_C= byte ptr -0Ch
var_8= dword ptr -8

push    ebp
mov     ebp, esp
push    ebx
sub     esp, 24h
mov     [esp+28h+lpTopLevelExceptionFilter], offset __gnu_exception_handler@4 ; lpTopLevelExceptionFilter
call    _SetUnhandledExceptionFilter@4 ; SetUnhandledExceptionFilter(x)
sub     esp, 4
call    ___cpu_features_init
call    __fpreset
mov     [ebp+var_8], 0
lea     eax, [ebp+var_8]
mov     [esp+28h+var_18], eax
mov     eax, __CRT_glob
mov     [esp+28h+lpTopLevelExceptionFilter], offset __argc
mov     [esp+28h+var_1C], eax
lea     eax, [ebp+var_C]
mov     [esp+28h+envp], eax
mov     eax, offset __argv
mov     [esp+28h+Mode], eax
call    ___getmainargs
mov     eax, ds:__CRT_fmode
test    eax, eax
jz      short loc_401210
mov     __fmode, eax
mov     edx, ds:__imp___iob
test    edx, edx
jnz     loc_401260

loc_4011BF:
cmp     edx, 0FFFFFFE0h
jz      short loc_4011E3
mov     eax, ds:__CRT_fmode
mov     [esp+28h+Mode], eax ; Mode
mov     eax, ds:__imp___iob
mov     eax, [eax+30h]
mov     [esp+28h+lpTopLevelExceptionFilter], eax ; FileHandle
call    __setmode
mov     edx, ds:__imp___iob

loc_4011E3:
cmp     edx, 0FFFFFFC0h
jz      short loc_401210
mov     eax, ds:__CRT_fmode
mov     [esp+28h+Mode], eax ; Mode
mov     eax, ds:__imp___iob
mov     eax, [eax+50h]
mov     [esp+28h+lpTopLevelExceptionFilter], eax ; FileHandle
call    __setmode
jmp     short loc_401210
align 10h

loc_401210:
call    ___p__fmode
mov     edx, __fmode
mov     [eax], edx
call    __pei386_runtime_relocator
and     esp, 0FFFFFFF0h
call    ___main
call    ___p__environ
mov     eax, [eax]
mov     [esp+28h+envp], eax ; envp
mov     eax, ds:__argv
mov     [esp+28h+Mode], eax ; argv
mov     eax, ds:__argc
mov     [esp+28h+lpTopLevelExceptionFilter], eax ; argc
call    _main
mov     ebx, eax
call    __cexit
mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
call    _ExitProcess@4  ; ExitProcess(x)
align 10h

loc_401260:             ; Mode
mov     [esp+28h+Mode], eax
mov     eax, ds:__imp___iob
mov     eax, [eax+10h]
mov     [esp+28h+lpTopLevelExceptionFilter], eax ; FileHandle
call    __setmode
mov     edx, ds:__imp___iob
jmp     loc_4011BF
___mingw_CRTStartup endp

align 10h


; Attributes: noreturn bp-based frame

public _mainCRTStartup
_mainCRTStartup proc near

Type= dword ptr -8

push    ebp
mov     ebp, esp
sub     esp, 8
mov     [esp+8+Type], 1 ; Type
call    ds:__imp____set_app_type
call    ___mingw_CRTStartup
_mainCRTStartup endp

align 10h


; Attributes: noreturn bp-based frame

public _WinMainCRTStartup
_WinMainCRTStartup proc near

Type= dword ptr -8

push    ebp
mov     ebp, esp
sub     esp, 8
mov     [esp+8+Type], 2 ; Type
call    ds:__imp____set_app_type
call    ___mingw_CRTStartup
_WinMainCRTStartup endp

align 10h


; Attributes: bp-based frame

; int __cdecl atexit(void (__cdecl *)())
public _atexit
_atexit proc near
push    ebp
mov     ecx, ds:__imp__atexit
mov     ebp, esp
pop     ebp
jmp     ecx
_atexit endp

align 10h


; Attributes: bp-based frame

; _onexit_t __cdecl _onexit(_onexit_t Func)
public __onexit
__onexit proc near

Func= dword ptr  8

push    ebp
mov     ecx, ds:__imp___onexit
mov     ebp, esp
pop     ebp
jmp     ecx
__onexit endp

align 10h


; Attributes: bp-based frame

public ___do_sjlj_init
___do_sjlj_init proc near
push    ebp
mov     ebp, esp
pop     ebp
jmp     ___w32_sharedptr_initialize
___do_sjlj_init endp

align 10h


; Attributes: bp-based frame

public _isPrime
_isPrime proc near

var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
sub     esp, 0Ch
mov     [ebp+var_4], 0
cmp     [ebp+arg_0], 1
jg      short loc_40130C
mov     [ebp+var_8], 0
jmp     short loc_401354

loc_40130C:
mov     [ebp+var_4], 2

loc_401313:
mov     edx, [ebp+arg_0]
mov     eax, edx
sar     eax, 1Fh
shr     eax, 1Fh
lea     eax, [edx+eax]
sar     eax, 1
cmp     eax, [ebp+var_4]
jl      short loc_40134D
mov     edx, [ebp+arg_0]
lea     eax, [ebp+var_4]
mov     [ebp+var_C], eax
mov     eax, edx
mov     ecx, [ebp+var_C]
cdq
idiv    dword ptr [ecx]
test    edx, edx
jnz     short loc_401346
mov     [ebp+var_8], 0
jmp     short loc_401354

loc_401346:
lea     eax, [ebp+var_4]
inc     dword ptr [eax]
jmp     short loc_401313

loc_40134D:
mov     [ebp+var_8], 1

loc_401354:
mov     eax, [ebp+var_8]
leave
retn
_isPrime endp



; Attributes: bp-based frame fuzzy-sp

; int __cdecl main(int argc, const char **argv, const char **envp)
public _main
_main proc near

Format= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
argc= dword ptr  8
argv= dword ptr  0Ch
envp= dword ptr  10h

push    ebp
mov     ebp, esp
sub     esp, 28h
and     esp, 0FFFFFFF0h
mov     eax, 0
add     eax, 0Fh
add     eax, 0Fh
shr     eax, 4
shl     eax, 4
mov     [ebp+var_1C], eax
mov     eax, [ebp+var_1C]
call    __alloca
call    ___main
mov     [ebp+var_4], 0
mov     [ebp+var_8], 0
mov     [ebp+var_C], 0
mov     [esp+28h+Format], offset Format ; "Enter two numbers to calculate the toti"...
call    _printf
lea     eax, [ebp+var_C]
mov     [esp+28h+var_20], eax
lea     eax, [ebp+var_8]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aDD ; "%d %d"
call    _scanf
mov     edx, [ebp+var_8]
dec     edx
mov     eax, [ebp+var_C]
dec     eax
imul    eax, edx
mov     [ebp+var_10], eax
mov     eax, [ebp+var_10]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aCalculatedToti ; "Calculated totient: %d\n"
call    _printf
mov     [esp+28h+Format], offset aEnterAPublicKe ; "Enter a public key: \n"
call    _printf
lea     eax, [ebp+var_4]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aD ; "%d"
call    _scanf
mov     [ebp+var_14], 1
mov     eax, [ebp+var_4]
mov     [esp+28h+Format], eax
call    _isPrime
test    eax, eax
jz      short loc_401422
mov     [esp+28h+Format], offset aTest1PassedThe ; "Test 1 Passed: The public key is prime."...
call    _printf
jmp     short loc_401435

loc_401422:
mov     [esp+28h+Format], offset aTest1FailedThe ; "Test 1 Failed: The public key is not pr"...
call    _printf
mov     [ebp+var_14], 0

loc_401435:
mov     eax, [ebp+var_4]
cmp     eax, [ebp+var_10]
jge     short loc_401452
mov     eax, [ebp+var_10]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aTest2PassedThe ; "Test 2 Passed: The public key is less t"...
call    _printf
jmp     short loc_40146C

loc_401452:
mov     eax, [ebp+var_10]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aTest2FailedThe ; "Test 2 Failed: The public key is not le"...
call    _printf
mov     [ebp+var_14], 0

loc_40146C:
mov     edx, [ebp+var_10]
lea     ecx, [ebp+var_4]
mov     [ebp+var_1C], ecx
mov     eax, edx
mov     ecx, [ebp+var_1C]
cdq
idiv    dword ptr [ecx]
test    edx, edx
jz      short loc_40148F
mov     [esp+28h+Format], offset aTest3PassedThe ; "Test 3 Passed: The public key is coprim"...
call    _printf
jmp     short loc_4014A2

loc_40148F:
mov     [esp+28h+Format], offset aTest3FailedThe ; "Test 3 Failed: The public key is not co"...
call    _printf
mov     [ebp+var_14], 0

loc_4014A2:
cmp     [ebp+var_14], 0
jz      short loc_401515
mov     [ebp+var_18], 0
mov     [esp+28h+Format], offset aYesThisNumberI ; "Yes, this number is a valid public key."...
call    _printf
mov     eax, [ebp+var_4]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aPublicKeyD ; "Public key: %d\n"
call    _printf
mov     [ebp+var_18], 0

loc_4014D5:
mov     eax, [ebp+var_18]
cmp     eax, [ebp+var_10]
jg      short loc_401521
mov     eax, [ebp+var_4]
mov     edx, eax
imul    edx, [ebp+var_18]
lea     eax, [ebp+var_10]
mov     [ebp+var_1C], eax
mov     eax, edx
mov     ecx, [ebp+var_1C]
cdq
idiv    dword ptr [ecx]
cmp     edx, 1
jnz     short loc_40150E
mov     eax, [ebp+var_18]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aPrivateKeyD ; "Private key: %d\n"
call    _printf
jmp     short loc_401521

loc_40150E:
lea     eax, [ebp+var_18]
inc     dword ptr [eax]
jmp     short loc_4014D5

loc_401515:
mov     [esp+28h+Format], offset aNoThisNumberIs ; "No, this number is not a valid public k"...
call    _printf

loc_401521:
mov     eax, 0
leave
retn
_main endp

align 10h


; Attributes: bp-based frame

; void __cdecl __do_global_dtors()
public ___do_global_dtors
___do_global_dtors proc near
push    ebp
mov     ebp, esp
sub     esp, 8
mov     eax, p_0
cmp     dword ptr [eax], 0
jz      short locret_401557

loc_401540:
call    dword ptr [eax]
mov     edx, p_0
lea     eax, [edx+4]
mov     edx, [edx+4]
mov     p_0, eax
test    edx, edx
jnz     short loc_401540

locret_401557:
leave
retn
___do_global_dtors endp

align 10h


; Attributes: bp-based frame

public ___do_global_ctors
___do_global_ctors proc near

var_8= dword ptr -8

push    ebp
mov     ebp, esp
push    ebx
sub     esp, 4
mov     eax, ds:___CTOR_LIST__
cmp     eax, 0FFFFFFFFh
jz      short loc_40159A

loc_401571:
test    eax, eax
mov     ebx, eax
jz      short loc_40158A
mov     esi, esi
lea     edi, [edi+0]

loc_401580:
call    ds:___CTOR_LIST__[ebx*4]
dec     ebx
jnz     short loc_401580

loc_40158A:             ; void (__cdecl *)()
mov     [esp+8+var_8], offset ___do_global_dtors
call    _atexit
pop     ecx
pop     ebx
pop     ebp
retn

loc_40159A:
xor     eax, eax
cmp     ds:off_401AFC, 0
jmp     short loc_4015AF

loc_4015A5:
inc     eax
mov     ebx, ds:off_401AFC[eax*4]
test    ebx, ebx

loc_4015AF:
jnz     short loc_4015A5
jmp     short loc_401571
___do_global_ctors endp

align 10h


; Attributes: bp-based frame

public ___main
___main proc near
push    ebp
mov     eax, ds:_initialized
mov     ebp, esp
test    eax, eax
jz      short loc_4015D0
pop     ebp
retn
align 10h

loc_4015D0:
pop     ebp
mov     eax, 1
mov     ds:_initialized, eax
jmp     short ___do_global_ctors
___main endp

align 10h


; Attributes: bp-based frame

public __pei386_runtime_relocator
__pei386_runtime_relocator proc near
push    ebp
mov     ecx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
mov     ebp, esp
jmp     short loc_4015FE
align 10h

loc_4015F0:
mov     edx, [ecx+4]
mov     eax, [ecx]
add     ecx, 8
add     [edx+400000h], eax

loc_4015FE:
cmp     ecx, offset __RUNTIME_PSEUDO_RELOC_LIST_END__
jb      short loc_4015F0
pop     ebp
retn
__pei386_runtime_relocator endp

align 10h


; Attributes: bp-based frame

public ___cpu_features_init
___cpu_features_init proc near
push    ebp
mov     ebp, esp
push    ebx
pushf
pushf
pop     eax
mov     ebx, eax
xor     eax, 200000h
push    eax
popf
pushf
pop     eax
popf
xor     eax, ebx
test    eax, 200000h
jz      loc_4016F0
xor     eax, eax
cpuid
test    eax, eax
jz      loc_4016F0
mov     eax, 1
cpuid
test    dh, 1
jnz     loc_4016F3

loc_40164C:
mov     eax, edx
and     eax, 8000h
test    ax, ax
jz      short loc_40165F
or      ds:___cpu_features, 2

loc_40165F:
test    edx, 800000h
jz      short loc_40166E
or      ds:___cpu_features, 4

loc_40166E:
test    edx, 1000000h
jz      short loc_40167D
or      ds:___cpu_features, 8

loc_40167D:
test    edx, 2000000h
jz      short loc_40168C
or      ds:___cpu_features, 10h

loc_40168C:
and     edx, 4000000h
jz      short loc_40169B
or      ds:___cpu_features, 20h

loc_40169B:
test    cl, 1
jz      short loc_4016A7
or      ds:___cpu_features, 40h

loc_4016A7:
test    ch, 20h
jz      short loc_4016B6
or      ds:___cpu_features, 80h

loc_4016B6:
mov     eax, 80000000h
cpuid
cmp     eax, 80000000h
jbe     short loc_4016F0
mov     eax, 80000001h
cpuid
test    edx, edx
js      short loc_4016FF

loc_4016CF:
and     edx, 40000000h
jz      short loc_4016F0
or      ds:___cpu_features, 200h
jmp     short loc_4016F0
align 10h

loc_4016F0:
pop     ebx
pop     ebp
retn

loc_4016F3:
or      ds:___cpu_features, 1
jmp     loc_40164C

loc_4016FF:
or      ds:___cpu_features, 100h
jmp     short loc_4016CF
___cpu_features_init endp

align 10h


; Attributes: bp-based frame

; void __cdecl _fpreset()
public __fpreset
__fpreset proc near
push    ebp
mov     ebp, esp
fninit
pop     ebp
retn
__fpreset endp

align 10h


; Attributes: bp-based frame

___w32_sharedptr_default_unexpected proc near
push    ebp
mov     eax, ds:___w32_sharedptr
mov     ebp, esp
pop     ebp
mov     ecx, [eax+4]
jmp     ecx
___w32_sharedptr_default_unexpected endp

align 10h


; Attributes: bp-based frame

___w32_sharedptr_get proc near

nAtom= word ptr -68h
lpBuffer= dword ptr -64h
nSize= dword ptr -60h
Buffer= byte ptr -58h
var_4= dword ptr -4

push    ebp
mov     edx, 42h ; 'B'
mov     ebp, esp
push    ebx
movzx   eax, ax
sub     esp, 64h
mov     [esp+68h+nSize], edx ; nSize
lea     edx, [ebp+Buffer]
xor     ebx, ebx
mov     [esp+68h+lpBuffer], edx ; lpBuffer
mov     dword ptr [esp+68h+nAtom], eax ; nAtom
call    ds:__imp__GetAtomNameA@12 ; GetAtomNameA(x,x,x)
mov     edx, 1Fh
mov     ecx, 1
sub     esp, 0Ch
test    eax, eax
jnz     short loc_40176D
jmp     short loc_4017A5

loc_401768:
add     ecx, ecx
dec     edx
js      short loc_40177B

loc_40176D:
cmp     byte ptr [edx+ebp-58h], 41h ; 'A'
jnz     short loc_401768
or      ebx, ecx
add     ecx, ecx
dec     edx
jns     short loc_40176D

loc_40177B:
cmp     dword ptr [ebx], 54h ; 'T'
jnz     short loc_401787
mov     eax, ebx
mov     ebx, [ebp+var_4]
leave
retn

loc_401787:
mov     dword ptr [esp+68h+nAtom], offset aW32SharedptrSi ; "w32_sharedptr->size == sizeof(W32_EH_SH"...
mov     edx, 0F7h
mov     eax, offset aGcc345GccConfi ; "../../gcc-3.4.5/gcc/config/i386/w32-sha"...
mov     [esp+68h+nSize], edx
mov     [esp+68h+lpBuffer], eax
call    __assert

loc_4017A5:
mov     dword ptr [esp+68h+nAtom], offset aGetatomnameaAt ; "GetAtomNameA (atom, s, sizeof(s)) != 0"
mov     ebx, 0F1h
mov     ecx, offset aGcc345GccConfi ; "../../gcc-3.4.5/gcc/config/i386/w32-sha"...
mov     [esp+68h+nSize], ebx
mov     [esp+68h+lpBuffer], ecx
call    __assert
lea     esi, [esi+0]
lea     edi, [edi+0]
___w32_sharedptr_get endp ; sp-analysis failed



; Attributes: bp-based frame

public ___w32_sharedptr_initialize
___w32_sharedptr_initialize proc near

lpString= dword ptr -0C8h
Val= dword ptr -0C4h
Size= dword ptr -0C0h
var_B8= byte ptr -0B8h
var_98= dword ptr -98h
var_94= dword ptr -94h
var_90= dword ptr -90h
var_8C= dword ptr -8Ch
var_88= dword ptr -88h
var_84= dword ptr -84h
var_80= dword ptr -80h
var_7C= dword ptr -7Ch
var_78= word ptr -78h
String= byte ptr -68h
var_64= dword ptr -64h
var_60= dword ptr -60h
var_5C= dword ptr -5Ch
var_58= dword ptr -58h
var_54= dword ptr -54h
var_50= dword ptr -50h
var_4C= dword ptr -4Ch
var_48= dword ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= word ptr -28h

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
sub     esp, 0BCh
mov     edi, ds:___w32_sharedptr
test    edi, edi
jz      short loc_4017EE
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_4017EE:
mov     dword ptr [ebp+String], 41414141h
mov     eax, ds:_w32_atom_suffix
lea     edi, [ebp+String]
mov     [ebp+var_64], 41414141h
mov     [ebp+var_60], 41414141h
mov     [ebp+var_48], eax
mov     eax, ds:dword_403254
mov     [ebp+var_5C], 41414141h
mov     [ebp+var_58], 41414141h
mov     [ebp+var_44], eax
mov     eax, ds:dword_403258
mov     [ebp+var_54], 41414141h
mov     [ebp+var_50], 41414141h
mov     [ebp+var_40], eax
mov     eax, ds:dword_40325C
mov     [ebp+var_4C], 41414141h
mov     [ebp+var_3C], eax
mov     eax, ds:dword_403260
mov     [ebp+var_38], eax
mov     eax, ds:dword_403264
mov     [ebp+var_34], eax
mov     eax, ds:dword_403268
mov     [ebp+var_30], eax
mov     eax, ds:dword_40326C
mov     [ebp+var_2C], eax
movzx   eax, ds:word_403270
mov     [ebp+var_28], ax
mov     [esp+0C8h+lpString], edi ; lpString
call    ds:__imp__FindAtomA@4 ; FindAtomA(x)
movzx   eax, ax
sub     esp, 4
test    eax, eax
jnz     loc_4019FC
mov     [esp+0C8h+lpString], 54h ; 'T' ; Size
call    _malloc
test    eax, eax
mov     ebx, eax
jz      loc_401A30
mov     [esp+0C8h+lpString], eax ; void *
xor     ecx, ecx
mov     esi, 54h ; 'T'
mov     [esp+0C8h+Val], ecx ; Val
mov     [esp+0C8h+Size], esi ; Size
call    _memset
mov     dword ptr [ebx+4], offset _abort
mov     ecx, 1
mov     dword ptr [ebx+8], offset ___w32_sharedptr_default_unexpected
mov     eax, ds:dw2_object_mutex_0
mov     dword ptr [ebx], 54h ; 'T'
mov     edx, ds:dword_40402C
mov     dword ptr [ebx+28h], 0
mov     [ebx+14h], eax
mov     eax, dw2_once_1
mov     [ebx+18h], edx
mov     edx, dword_402010
mov     [ebx+1Ch], eax
mov     eax, ds:sjl_fc_key_2
mov     dword ptr [ebx+2Ch], 0FFFFFFFFh
mov     [ebx+20h], edx
mov     [ebx+30h], eax
mov     eax, sjl_once_3
mov     edx, dword_402018
mov     [ebx+34h], eax
mov     eax, ds:eh_globals_static_4
mov     [ebx+38h], edx
mov     edx, ds:dword_40404C
mov     [ebx+3Ch], eax
mov     eax, ds:eh_globals_key_5
mov     dword ptr [ebx+44h], 0FFFFFFFFh
mov     [ebx+40h], edx
mov     [ebx+48h], eax
mov     edx, dword_402020
mov     eax, eh_globals_once_6
mov     [ebx+50h], edx
mov     edx, 1Fh
mov     [ebx+4Ch], eax

loc_401950:
mov     eax, ebx
and     eax, ecx
cmp     eax, 1
sbb     eax, eax
and     al, 20h
add     ecx, ecx
add     al, 41h ; 'A'
mov     [edx+ebp-0B8h], al
dec     edx
jns     short loc_401950
mov     eax, ds:_w32_atom_suffix
mov     [ebp+var_98], eax
mov     eax, ds:dword_403254
mov     [ebp+var_94], eax
mov     eax, ds:dword_403258
mov     [ebp+var_90], eax
mov     eax, ds:dword_40325C
mov     [ebp+var_8C], eax
mov     eax, ds:dword_403260
mov     [ebp+var_88], eax
mov     eax, ds:dword_403264
mov     [ebp+var_84], eax
mov     eax, ds:dword_403268
mov     [ebp+var_80], eax
mov     eax, ds:dword_40326C
mov     [ebp+var_7C], eax
movzx   eax, ds:word_403270
mov     [ebp+var_78], ax
lea     eax, [ebp+var_B8]
mov     [esp+0C8h+lpString], eax ; lpString
call    ds:__imp__AddAtomA@4 ; AddAtomA(x)
movzx   esi, ax
sub     esp, 4
test    esi, esi
jnz     short loc_401A21

loc_4019DF:
xor     edx, edx

loc_4019E1:
test    edx, edx
jnz     short loc_401A03
mov     [esp+0C8h+lpString], ebx ; Block
call    _free
mov     [esp+0C8h+lpString], edi ; lpString
call    ds:__imp__FindAtomA@4 ; FindAtomA(x)
sub     esp, 4
movzx   eax, ax

loc_4019FC:
call    ___w32_sharedptr_get
mov     ebx, eax

loc_401A03:
mov     ds:___w32_sharedptr, ebx
lea     eax, [ebx+4]
mov     ds:___w32_sharedptr_terminate, eax
lea     eax, [ebx+8]
mov     ds:___w32_sharedptr_unexpected, eax
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_401A21:
mov     eax, esi
call    ___w32_sharedptr_get
cmp     eax, ebx
mov     edx, esi
jnz     short loc_4019DF
jmp     short loc_4019E1

loc_401A30:
call    _abort
___w32_sharedptr_initialize endp

align 10h



public __alloca
__alloca proc near
push    ecx
mov     ecx, esp
add     ecx, 8

probe:
cmp     eax, 1000h
jb      short done
sub     ecx, 1000h
or      dword ptr [ecx], 0
sub     eax, 1000h
jmp     short probe

done:
sub     ecx, eax
or      dword ptr [ecx], 0
mov     eax, esp
mov     esp, ecx
mov     ecx, [eax]
mov     eax, [eax+4]
jmp     eax
__alloca endp

align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __cexit. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___p__environ. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _signal. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___p__fmode. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __setmode. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___getmainargs. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _scanf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __assert. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _abort. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memset. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION SetUnhandledExceptionFilter(x). PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess(x). PRESS CTRL-NUMPAD+ TO EXPAND]
align 4


; Attributes: bp-based frame

___sjlj_init_ctor proc near
push    ebp
mov     ebp, esp
pop     ebp
jmp     ___do_sjlj_init
___sjlj_init_ctor endp

align 8
public ___CTOR_LIST__
___CTOR_LIST__ dd 0FFFFFFFFh
off_401AFC dd offset ___sjlj_init_ctor
dd 0
public __DTOR_LIST__
__DTOR_LIST__ dd 0FFFFFFFFh
dword_401B08 dd 3Eh dup(0)
dd 100h dup(?)
_text ends

; Section 2. (virtual address 00002000)
; Virtual size                  : 0000002C (     44.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00001000
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read/Write
_data segment dword public 'DATA' use32
assume cs:_data
;org 402000h
public __CRT_glob
__CRT_glob dd 0FFFFFFFFh
public __fmode
; int _fmode
__fmode dd 4000h
p_0 dd offset dword_401B08
dw2_once_1 dd 0
dword_402010 dd 0FFFFFFFFh
sjl_once_3 dd 0
dword_402018 dd 0FFFFFFFFh
eh_globals_once_6 dd 0
dword_402020 dd 0FFFFFFFFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
public __data_end__
__data_end__ db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
align 1000h
_data ends

; Section 3. (virtual address 00003000)
; Virtual size                  : 00000310 (    784.)
; Section size in file          : 00000400 (   1024.)
; Offset to raw data for section: 00001200
; Flags 40300040: Data Readable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read
_rdata segment dword public 'DATA' use32
assume cs:_rdata
;org 403000h
; const char Format[]
Format db 'Enter two numbers to calculate the '
db 'totient (e.g., prime numbers): ',0Ah
db 0
; const char aDD[]
aDD db '%d %d',0
; const char aCalculatedToti[]
aCalculatedToti db 'Calculated totient: %d',0Ah,0
; const char aEnterAPublicKe[]
aEnterAPublicKe db 'Enter a public key: ',0Ah,0
; const char aD[]
aD db '%d',0
align 4
; const char aTest1PassedThe[]
aTest1PassedThe db 'Test 1 Passed: The public key is pr'
db 'ime.',0Ah,0
align 4
; const char aTest1FailedThe[]
aTest1FailedThe db 'Test 1 Failed: The public key is no'
db 't prime.',0Ah,0
align 4
; const char aTest2PassedThe[]
aTest2PassedThe db 'Test 2 Passed: The public key is le'
db 'ss than the totient (%d).',0Ah,0
align 4
; const char aTest2FailedThe[]
aTest2FailedThe db 'Test 2 Failed: The public key is no'
db 't less than the totient (%d).',0Ah,0
align 4
; const char aTest3PassedThe[]
aTest3PassedThe db 'Test 3 Passed: The public key is co'
db 'prime with the totient.',0Ah,0
; const char aTest3FailedThe[]
aTest3FailedThe db 'Test 3 Failed: The public key is no'
db 't coprime with the totient.',0Ah,0
; const char aYesThisNumberI[]
aYesThisNumberI db 'Yes, this number is a valid public '
db 'key.',0Ah,0
; const char aPublicKeyD[]
aPublicKeyD db 'Public key: %d',0Ah,0
; const char aPrivateKeyD[]
aPrivateKeyD db 'Private key: %d',0Ah,0
align 4
; const char aNoThisNumberIs[]
aNoThisNumberIs db 'No, this number is not a valid publ'
db 'ic key.',0Ah,0
_w32_atom_suffix dd 42494C2Dh
dword_403254 dd 57434347h
dword_403258 dd 452D3233h
dword_40325C dd 2D332D48h
dword_403260 dd 4A4C4A53h
dword_403264 dd 4854472Dh
dword_403268 dd 494D2D52h
dword_40326C dd 3357474Eh
word_403270 dw 32h
align 4
aW32SharedptrSi db 'w32_sharedptr->size == sizeof(W32_E'
db 'H_SHARED)',0
align 4
aGcc345GccConfi db '../../gcc-3.4.5/gcc/config/i386/w32'
db '-shared-ptr.c',0
align 4
aGetatomnameaAt db 'GetAtomNameA (atom, s, sizeof(s)) !'
db '= 0',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
public __RUNTIME_PSEUDO_RELOC_LIST_END__
__RUNTIME_PSEUDO_RELOC_LIST_END__ db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
align 1000h
_rdata ends

; Section 4. (virtual address 00004000)
; Virtual size                  : 000000B8 (    184.)
; Section size in file          : 00000000 (      0.)
; Offset to raw data for section: 00000000
; Flags C0400080: Bss Readable Writable
; Alignment     : 8 bytes

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss segment qword public 'BSS' use32
assume cs:_bss
;org 404000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
public __argv
; char **_argv
__argv dd ?
public __argc
; int _argc
__argc dd ?
public __CRT_fmode
; int _CRT_fmode
__CRT_fmode dd ?
align 10h
_initialized dd ?
align 10h
public ___cpu_features
___cpu_features dd ?
align 8
dw2_object_mutex_0 dd ?
dword_40402C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
sjl_fc_key_2 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
eh_globals_static_4 dd ?
dword_40404C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
eh_globals_key_5 dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
public ___w32_sharedptr_terminate
___w32_sharedptr_terminate dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
public ___w32_sharedptr
___w32_sharedptr dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
public ___w32_sharedptr_unexpected
___w32_sharedptr_unexpected dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
public __bss_end__
__bss_end__ db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
_bss ends

; Section 5. (virtual address 00005000)
; Virtual size                  : 00000290 (    656.)
; Section size in file          : 00000400 (   1024.)
; Offset to raw data for section: 00001600
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes

; Segment type: Externs
; _idata
extrn __head_libkernel32_a

;
; Imports from KERNEL32.dll
;
; ATOM (__stdcall *AddAtomA)(LPCSTR lpString)
extrn __imp__AddAtomA@4:dword
; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
extrn __imp__ExitProcess@4:dword
; ATOM (__stdcall *FindAtomA)(LPCSTR lpString)
extrn __imp__FindAtomA@4:dword
; UINT (__stdcall *GetAtomNameA)(ATOM nAtom, LPSTR lpBuffer, int nSize)
extrn __imp__GetAtomNameA@12:dword
; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extrn __imp__SetUnhandledExceptionFilter@4:dword

;
; Imports from msvcrt.dll
;
extrn __imp____getmainargs:dword
; char ***(__cdecl *___p__environ)()
extrn __imp____p__environ:dword
; int *(__cdecl *___p__fmode)()
extrn __imp____p__fmode:dword
; void (__cdecl *___set_app_type)(_crt_app_type Type)
extrn __imp____set_app_type:dword
extrn __imp___assert:dword
; void (__cdecl *__cexit)()
extrn __imp___cexit:dword
; FILE __iob[]
extrn __imp___iob:dword
; _onexit_t (__cdecl *__onexit)(_onexit_t Func)
extrn __imp___onexit:dword
; int (__cdecl *__setmode)(int FileHandle, int Mode)
extrn __imp___setmode:dword
; void (__cdecl __noreturn *_abort)()
extrn __imp__abort:dword
; int (__cdecl *_atexit)(void (__cdecl *)())
extrn __imp__atexit:dword
; void (__cdecl *_free)(void *Block)
extrn __imp__free:dword
; void *(__cdecl *_malloc)(size_t Size)
extrn __imp__malloc:dword
; void *(__cdecl *_memset)(void *, int Val, size_t Size)
extrn __imp__memset:dword
; int (*_printf)(const char *const Format, ...)
extrn __imp__printf:dword
; int (*_scanf)(const char *const Format, ...)
extrn __imp__scanf:dword
; _crt_signal_t (__cdecl *_signal)(int Signal, _crt_signal_t Function)
extrn __imp__signal:dword



end _mainCRTStartup
